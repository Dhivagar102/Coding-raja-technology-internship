
import os
import pickle
from datetime import datetime

class Task:
    def __init__(self, description, priority, due_date):
        self.description = description
        self.priority = priority
        self.due_date = due_date
        self.completed = False

    def __str__(self):
        status = "Completed" if self.completed else "Pending"
        return f"{self.description} - Priority: {self.priority}, Due Date: {self.due_date}, Status: {status}"

class ToDoList:
    def __init__(self, filename):
        self.filename = filename
        self.tasks = []
        self.load_tasks()

    def load_tasks(self):
        if os.path.exists(self.filename):
            with open(self.filename, 'rb') as file:
                self.tasks = pickle.load(file)

    def save_tasks(self):
        with open(self.filename, 'wb') as file:
            pickle.dump(self.tasks, file)

    def add_task(self, task):
        self.tasks.append(task)
        self.save_tasks()

    def remove_task(self, index):
        if index >= 0 and index < len(self.tasks):
            del self.tasks[index]
            self.save_tasks()

    def mark_task_completed(self, index):
        if index >= 0 and index < len(self.tasks):
            self.tasks[index].completed = True
            self.save_tasks()

    def list_tasks(self):
        for index, task in enumerate(self.tasks):
            print(f"{index + 1}. {task}")

def main():
    todo_list = ToDoList("tasks.pkl")

    while True:
        print("\n---- To-Do List Menu ----")
        print("1. Add Task")
        print("2. Remove Task")
        print("3. Mark Task as Completed")
        print("4. List Tasks")
        print("5. Exit")

        choice = input("Enter your choice: ")

        if choice == '1':
            description = input("Enter task description: ")
            priority = input("Enter task priority (high/medium/low): ")
            due_date = input("Enter due date (YYYY-MM-DD): ")
            due_date = datetime.strptime(due_date, "%Y-%m-%d").date()
            task = Task(description, priority, due_date)
            todo_list.add_task(task)
            print("Task added successfully.")
        elif choice == '2':
            todo_list.list_tasks()
            index = int(input("Enter task number to remove: ")) - 1
            todo_list.remove_task(index)
            print("Task removed successfully.")
        elif choice == '3':
            todo_list.list_tasks()
            index = int(input("Enter task number to mark as completed: ")) - 1
            todo_list.mark_task_completed(index)
            print("Task marked as completed.")
        elif choice == '4':
            todo_list.list_tasks()
        elif choice == '5':
            print("Exiting...")
            break
        else:
            print("Invalid choice. Please try again.")

if __name__ == "__main__":
    main()
